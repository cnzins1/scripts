-- open source, skid. IDGAF.

local player = game:GetService("Players").LocalPlayer
local Originals = {}

local function modifyToolSettings(tool)
    local Module = require(tool.ACS_Settings)
    Originals[tool.Name] = {}
    for key, value in pairs(Module) do
        if type(value) == "table" then
            Originals[tool.Name][key] = {
                Ammo = value.Ammo, StoredAmmo = value.StoredAmmo, AmmoInGun = value.AmmoInGun,
                MaxStoredAmmo = value.MaxStoredAmmo, ShootRate = value.ShootRate, LimbDamage = value.LimbDamage,
                TorsoDamage = value.TorsoDamage, HeadDamage = value.HeadDamage, BulletPenetration = value.BulletPenetration,
                camRecoil = value.camRecoil, gunRecoil = value.gunRecoil, AimRecoilReduction = value.AimRecoilReduction,
                MinRecoilPower = value.MinRecoilPower, MaxRecoilPower = value.MaxRecoilPower,
                RecoilPowerStepAmount = value.RecoilPowerStepAmount, FlashChance = value.FlashChance, 
                MinSpread = value.MinSpread, MaxSpread = value.MaxSpread
            }
        end
    end
    Module.Ammo, Module.StoredAmmo, Module.AmmoInGun, Module.MaxStoredAmmo = 200, 200, 200, 200
    local success, err = pcall(function()
        Module.camRecoil, Module.gunRecoil, Module.AimRecoilReduction = 0, 0, 1000
        Module.MinRecoilPower, Module.MaxRecoilPower, Module.RecoilPowerStepAmount = 0, 0, 0
    end)
    if not success then warn("Error modifying recoil settings for " .. tool.Name .. ": " .. err) end
    Module.BulletPenetration = 10000
    success, err = pcall(function()
        Module.MinSpread, Module.MaxSpread = 0, 0
    end)
    if not success then warn("Error modifying spread settings for " .. tool.Name .. ": " .. err) end
end

for _, tool in pairs(player.Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:FindFirstChild("ACS_Settings") then
        modifyToolSettings(tool)
    end
end
